package com.timeanddate.services.dataTypes.holidays;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.timeanddate.services.common.XmlUtils;
import com.timeanddate.services.dataTypes.time.TADTime;
import com.timeanddate.services.dataTypes.places.Country;

/**
 * 
 * @author Cato Auestad {@literal <cato@timeanddate.com>}
 *
 */
public class Holiday {
	private int _id;
	private String _uid;
	private String _name;
	private TADTime _date;
	private URI _url;
	private Country _country;
	private String _locations;
	public List<HolidayState> _states;
	private String _description;
	private List<String> _types;
	
	/**
	 * Identifier for the holiday definition. Please note that this id is not
	 * unique, not even with a single year – the same holiday event may be
	 * returned multiple time because it is observed on a different day, or
	 * because it is scheduled in a different calendar (Hebrew or Muslim
	 * calendar) and happens multiple times within a Gregorian year. Use the Uid
	 * field for purposes where you need a unique identifier.
	 */
	public int getId() {
		return _id;
	}

	/**
	 * Id for the shown holiday instance. The id is designed to be unique across
	 * all holiday instances generated by the timeanddate.com API services and
	 * respects different calendars and other reasons that may cause events to
	 * occurs multiple times within one Gregorian year.
	 *
	 * Example: 0007d600000007db
	 */
	public String getUid() {
		return _uid == null ? "" : _uid;
	}

	/**
	 * Holiday/Observance name.
	 */
	public String getName() {
		return _name == null ? "" : _name;
	}

	/**
	 * Date/time of the holiday instance. Most holidays do have a specific time
	 * – in this case the time components will be skipped. Some special events
	 * like equinoxes and solstices include the exact time of the event as well,
	 * in this case the timestamp will be in local time zone (including time
	 * zone data) (countries with multiple timezones: local time in capital
	 * city).
	 */
	public TADTime getDate() {
		return _date;
	}

	/**
	 * Further information about the specific holiday. The URL points to the
	 * timeanddate.com web page.
	 * 
	 * Example: http://www.timeanddate.com/holidays/us/new-year-day
	 */
	public URI getUrl() {
		return _url;
	}

	/**
	 * Country of the holiday instance.
	 */
	public Country getCountry() {
		return _country;
	}

	/**
	 * Summary of locations where this holiday instance is valid. Element is
	 * only present if the holiday instance does not affect the whole country.
	 */
	public String getLocations() {
		return _locations == null ? "" : _locations;
	}

	/**
	 * States/subdivisions that are affected by this holiday instance. This
	 * element is only present if the holiday instance is not valid in the whole
	 * country.
	 */
	public List<HolidayState> getStates() {
		return _states;
	}

	/**
	 * A short description of the holiday instance.
	 */
	public String getDescription() {
		return _description == null ? "" : _description;
	}

	/**
	 * Classification of the holiday. Most days have only one classification,
	 * bust some have multiple types associated. This happens e.g. in
	 * conjunction with religious days that also are flag days.
	 *
	 * Example: National Holiday
	 */
	public List<String> getTypes() {
		return _types;
	}

	private Holiday() {
		_types = new ArrayList<String>();
		_states = new ArrayList<HolidayState>();
	}

	public static Holiday fromNode(Node node) {
		Holiday holiday = new Holiday();
		NamedNodeMap attr = node.getAttributes();
		Node id = attr.getNamedItem("id");
		Node url = attr.getNamedItem("url");
		NodeList children = node.getChildNodes();

		for (Node child : XmlUtils.asList(children)) {
			switch (child.getNodeName()) {
			case "name":
				holiday._name = child.getTextContent();
				break;
			case "locations":
				holiday._locations = child.getTextContent();
				break;
			case "uid":
				holiday._uid = child.getTextContent();
				break;
			case "country":
				holiday._country = com.timeanddate.services.dataTypes.places.Country
						.fromNode(child);
				break;
			case "oneliner":
				holiday._description = child.getTextContent();
				break;
			case "types":
				for (Node type : XmlUtils.asList(child.getChildNodes())) {
					holiday._types.add(type.getTextContent());
				}
				break;
			case "states":
				for (Node state : XmlUtils.asList(child.getChildNodes())) {
					holiday._states.add(HolidayState.fromNode(state));
				}
				break;
			case "date":
				holiday._date = TADTime.fromNode(child);
			}
		}

		holiday._id = Integer.parseInt(id.getTextContent());
		try {
			holiday._url = new URI(url.getTextContent());
		} catch (DOMException | URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return holiday;
	}
}
